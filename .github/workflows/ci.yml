name: CI

on:
  push:
    # Ignore bors branches, since they are covered by `clippy_bors.yml`
    branches:
      - main
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
    - 'README'
    - 'COPYRIGHT'
    - 'LICENSE-*'
    - '**.md'
    - '**.txt'
  pull_request:
    # Don't run Clippy tests, when only textfiles were modified
    paths-ignore:
    - 'README'
    - 'COPYRIGHT'
    - 'LICENSE-*'
    - '**.md'
    - '**.txt'

env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -Dwarnings
  RUST_BACKTRACE: 1
  nightly: nightly-2021-11-23
  minrust: 1.56


jobs:
  tests-pass:
    name: all systems go
    runs-on: ubuntu-latest
    needs:
      - unit-tests
      - tarpaulin
      - miri
      - docs
      - valgrind
    steps:
      - run: exit 0

  unit-tests:
    name: unit tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust:
          - nightly
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v1
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: test fmmap all features
        run: cargo test --all-features
        working-directory: fmmap-rs

  tarpaulin:
    name: cargo tarpaulin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest nightly
        uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
          components: rustfmt, clippy
      - uses: Swatinem/rust-cache@v1

      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/tarpaulin@v0.1
      - name: Run cargo tarpaulin
        run: cargo tarpaulin --all-features --workspace --run-types Tests,Doctests --out Xml
        working-directory: fmmap-rs

      # Build benchmarks. Run of benchmarks is done by bench.yml workflow.
      # - name: build benches
      #  run: cargo build --benches
      #  working-directory: benches
      # bench.yml workflow runs benchmarks only on linux.
      #  if: startsWith(matrix.os, 'ubuntu')

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v1.0.2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: file

  valgrind:
    name: valgrind
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Rust
        run: rustup update stable
      - uses: Swatinem/rust-cache@v1

      - name: Install Valgrind
        run: |
          sudo apt-get update -y
          sudo apt-get install -y valgrind
      # Compile tests
      - name: cargo build test-sync
        run: cargo build --features sync --bin test-sync
        working-directory: tests-integration

      # Run with valgrind
      - name: Run valgrind test-sync
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/test-sync

      # Compile tests
      - name: cargo build test-tokio-async
        run: cargo build --features tokio-async --bin test-tokio-async
        working-directory: tests-integration

      # Run with valgrind
      - name: Run valgrind test-tokio-async
        run: valgrind --error-exitcode=1 --leak-check=full --show-leak-kinds=all ./target/debug/test-tokio-async

  miri:
    name: miri
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: Install Miri
        run: |
          set -e
          rustup component add miri
          cargo miri setup
          rm -rf tokio/tests
      - name: miri
        run: cargo miri test --features sync,tokio-async task
        working-directory: fmmap-rs

  docs:
    name: docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.nightly }}
          override: true
      - uses: Swatinem/rust-cache@v1
      - name: "doc --lib --all-features"
        run: cargo doc --lib --no-deps --all-features --document-private-items
        env:
          RUSTFLAGS: --cfg docsrs
          RUSTDOCFLAGS: --cfg docsrs -Dwarnings
